[{"/Users/beisen/myapp/src/index.js":"1","/Users/beisen/myapp/src/App.jsx":"2","/Users/beisen/myapp/src/containers/Footer/index.jsx":"3","/Users/beisen/myapp/src/redux/actions/todolist.js":"4","/Users/beisen/myapp/src/redux/constants.js":"5","/Users/beisen/myapp/src/redux/store.js":"6","/Users/beisen/myapp/src/redux/reducers/todolist.js":"7","/Users/beisen/myapp/src/containers/Main/index.jsx":"8","/Users/beisen/myapp/src/containers/Main/Item/index.jsx":"9","/Users/beisen/myapp/src/containers/Header/index.jsx":"10"},{"size":255,"mtime":1611057344068,"results":"11","hashOfConfig":"12"},{"size":491,"mtime":1611146034266,"results":"13","hashOfConfig":"12"},{"size":1390,"mtime":1611141879937,"results":"14","hashOfConfig":"12"},{"size":346,"mtime":1611139367994,"results":"15","hashOfConfig":"12"},{"size":126,"mtime":1611139362414,"results":"16","hashOfConfig":"12"},{"size":127,"mtime":1611051028780,"results":"17","hashOfConfig":"12"},{"size":4497,"mtime":1611144538735,"results":"18","hashOfConfig":"12"},{"size":466,"mtime":1611110947417,"results":"19","hashOfConfig":"12"},{"size":3339,"mtime":1611128851591,"results":"20","hashOfConfig":"12"},{"size":3583,"mtime":1611145919676,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1pcz86i",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/beisen/myapp/src/index.js",[],["45","46"],"/Users/beisen/myapp/src/App.jsx",[],"/Users/beisen/myapp/src/containers/Footer/index.jsx",[],"/Users/beisen/myapp/src/redux/actions/todolist.js",["47"],"import {ADD_TODO, UPDATE_TODO, UPADTE_HISTORY, UPADTE_FIELD} from '../constants'\n// 添加一个todo\nexport const addTodo = data => ({type: ADD_TODO, data})\n// 更新todolist的数据状态\nexport const updateTodolist = data => ({type: UPDATE_TODO, data})\n// 更新历史记录\nexport const updateHistory = data => ({type: UPADTE_HISTORY, data}) ","/Users/beisen/myapp/src/redux/constants.js",[],"/Users/beisen/myapp/src/redux/store.js",[],"/Users/beisen/myapp/src/redux/reducers/todolist.js",["48","49","50","51"],"/Users/beisen/myapp/src/containers/Main/index.jsx",[],"/Users/beisen/myapp/src/containers/Main/Item/index.jsx",["52","53"],"/*\n    问题产生： 当我们双击item时，触发事件给isEdit设置为true时，由于是个异步操作\n    我们不能直接获取到inputRef了。\n    const handleEdit = event => {\n        // 双击开启编辑\n        setIsEdit(editState => editState = true)\n        console.log(inputRef); // 这里是不能通过inputRef.current获取元素当\n    }\n    解决：useEffect钩子函数，当isEdit状态改变时触发：\n*/\nimport React, { useState, Fragment, useRef, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { updateTodolist } from '../../../redux/actions/todolist'\nconst ItemUI = props => {\n    const [currentItem, setCurrentItem] = useState('00'); // 当前鼠标选中的元素\n    const [isEdit, setIsEdit] = useState(false); // 是否处于编辑状态\n    const [value, setValue] = useState(''); // 存放编辑的任务名\n    const inputRef = useRef() // 输入框ref\n    useEffect(() => {\n        if(isEdit) {\n            inputRef.current.value = value;\n            inputRef.current.select()\n        }\n    }, [isEdit])\n    // console.log(props);\n    const { id, isFinished, title, isShow, updateTodolist} = props\n    // 鼠标移入显示删除\n    const handleMouse = (flag, id) => {\n        if(flag) {\n            // 鼠标移入\n            setCurrentItem(id)\n        } else {\n            // 鼠标移出\n            setCurrentItem('00')\n        }\n    }\n    // 更新某个任务状态\n    const updateOneState = (checkedOne, id) => {\n        updateTodolist({checkedOne,id})\n    }\n    // 编辑状态\n    const handleEdit = event => {\n        setValue(event.target.innerHTML)\n        // 双击开启编辑\n        setIsEdit(true)       \n    }\n    // 封装setEdit函数为同步\n    const setEdiltAsync = () => {\n        return new Promise(reslove => {\n            setIsEdit(editState => {\n                editState = true;\n                return editState;\n            })\n        }) \n    }\n    // 修改任务\n    const handleBlur = (event, id) => {\n        const {value} = event.target\n        if (value.trim().length === 0) {\n            alert('任务不能为空')\n            return\n        }\n        // 失焦关闭编辑\n        setIsEdit(false)\n        updateTodolist({isEdit: true, id, title: value})\n    }\n    // 删除任务\n    const tdeleteTodo = id => {\n        updateTodolist({isDelete: true, id})\n    }\n    return (\n        <Fragment>\n            { isShow && <div className='item' onMouseEnter={() => handleMouse(true, id)} onMouseLeave={() => handleMouse(false)}>\n                {\n                    !isEdit ?\n                        <Fragment>\n                            <input type=\"checkbox\" onChange={event => updateOneState(event.target.checked, id)} checked={isFinished} />\n                            <span onDoubleClick={handleEdit} className='todo'>{title}</span>\n                        </Fragment> :\n                        <input type=\"text\" className='edit' onBlur={event => handleBlur(event, id)} ref={inputRef} />\n                }\n\n                <div className='delete' onClick={() => tdeleteTodo(id)} style={currentItem === id ? { display: 'block' } : { display: 'none' }}>X</div>\n            </div>}\n        </Fragment>\n    )\n}\nexport default connect(\n    state => ({ todolist: state.todolist }),\n    {\n        updateTodolist\n    }\n)(ItemUI)\n","/Users/beisen/myapp/src/containers/Header/index.jsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":48,"nodeType":"60","messageId":"61","endLine":1,"endColumn":60},{"ruleId":"62","severity":1,"message":"63","line":34,"column":1,"nodeType":"64","endLine":125,"endColumn":2},{"ruleId":"65","severity":1,"message":"66","line":79,"column":35,"nodeType":"67","messageId":"68","endLine":79,"endColumn":37},{"ruleId":"69","severity":1,"message":"70","line":80,"column":32,"nodeType":"71","messageId":"72","endLine":80,"endColumn":34},{"ruleId":"73","severity":1,"message":"74","line":91,"column":17,"nodeType":"75","messageId":"76","endLine":112,"endColumn":18},{"ruleId":"77","severity":1,"message":"78","line":24,"column":8,"nodeType":"79","endLine":24,"endColumn":16,"suggestions":"80"},{"ruleId":"58","severity":1,"message":"81","line":48,"column":11,"nodeType":"60","messageId":"61","endLine":48,"endColumn":24},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'UPADTE_FIELD' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.","ArrayExpression",["84"],"'setEdiltAsync' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [isEdit, value]",{"range":"87","text":"88"},[855,863],"[isEdit, value]"]